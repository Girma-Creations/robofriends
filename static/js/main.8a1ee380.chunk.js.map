{"version":3,"sources":["Header.js","Search.js","Card.js","robots.js","Scroll.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","class","children","Search","_ref","searchChange","className","type","placeholder","onChange","Card","robots","robolist","cardlist","i","length","push","id","name","email","src","concat","title","alt","image","Scroll","style","overflow","height","Footer","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","searchfield","target","value","state","_this2","fetch","then","response","json","users","_this3","filteredRobots","filter","toLowerCase","includes","src_Header","src_Search","src_Scroll","src_Card","src_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8a1ee380.chunk.js","sourcesContent":["import React from 'react';\r\nimport 'tachyons';\r\n\r\nconst Header = (props) => {\r\n    return(\r\n        <div>\r\n        <nav class=\"pa3 pa4-ns bb mw-100\">\r\n        <h1 class=\"black b f-headline-ns tc db mb3 mb4-ns \">Robofriends</h1>\r\n        </nav>\r\n        {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport 'tachyons';\r\nconst Search = ({searchChange}) => {\r\n    return (\r\n        <div>\r\n            <input className='b--input-reset ba b--black-20 mw-100 v3 ma2 tc'type=\"search\" placeholder='search for a robot'onChange = {searchChange} ></input>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search;","import React from \"react\";\r\nimport 'tachyons';\r\n\r\nconst Card = ({robots}) => {\r\n    const robolist = [];\r\n    let cardlist = [];\r\n    for (let i = 0; i < robots.length; i++){\r\n        robolist.push({id: robots[i].id,name: robots[i].name,email: robots[i].email})\r\n        cardlist.push(<div class=\"w5 grow center bg-white br3 pa3 pa4-ns mv3 ba b--black-10 shadow-3\">\r\n                        <div class=\"tc\">\r\n                            <img src= {`https://robohash.org/${robolist[i].id}? size=200x200`} class=\"br-100 h4 w4 dib ba b--black-05 pa2\" title=\"robot\" alt=\"robot\"/>\r\n                            <h1>{robolist[i].name}</h1>\r\n                            <p>{robolist[i].email}</p>\r\n                        </div>\r\n                        </div>)\r\n    }\r\n    if (robots.length > 0 ){\r\n        return(<div class='flex flex-wrap items-center'>\r\n            {cardlist}\r\n        </div>)\r\n    }\r\n    else{\r\n    return(\r\n        <div className=\"baskervile mv6\">\r\n             <p className='o-30 b 4rem'>Sorry we do not have the robot you're looking for</p>\r\n        </div>\r\n    )}\r\n}\r\n\r\nexport default Card ;","\r\n\r\nconst robots = [{\r\n    name: 'Jenny Joe',\r\n    image: '0',\r\n    email: 'jennyjoe@robo.com'\r\n    },\r\n    {\r\n    name: 'Loius Jio',\r\n    image: '1',\r\n    email: 'loiusjio@robo.com'\r\n    },\r\n    {\r\n    name: 'Katy Jenkins',\r\n    image: '2',\r\n    email: 'katyjenkins@robo.com'\r\n    },\r\n    {\r\n    name: 'Baylee Rose',\r\n    image: '3',\r\n    email: 'bayleerose@robo.com'\r\n    },\r\n    {\r\n    name: 'Kaylae Eve',\r\n    image: '4',\r\n    email: 'kaylaeeve@robo.com'\r\n    },\r\n    {\r\n    name: 'Parker Adam',\r\n    image: '5',\r\n    email: 'parkeradam@robo.com'\r\n    },\r\n    {\r\n    name: 'Greg Gonzales',\r\n    image: '6',\r\n    email: 'greggonzales@robo.com'\r\n    },\r\n    {\r\n    name: 'Jerry Joseph',\r\n    image: '7',\r\n    email: 'jerryjoseph@robo.com'\r\n    }\r\n\r\n]\r\nexport default robots;","import React from 'react';\r\n\r\nconst Scroll = (props) =>{\r\n    return(\r\n        <div style={{overflow: 'scroll', height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\nimport 'tachyons';\r\n\r\nconst Footer = () => {\r\n    return(\r\n    <footer class=\"pv4 ph3 ph5-m ph6-l mid-gray mb0 \">\r\n    <small class=\"f6 db tc\"><b class=\"ttu\">An Isaiah Buchberger Creation</b><br/>Â©2019</small>\r\n    </footer>)\r\n}\r\n\r\nexport default Footer;","\r\nimport React,{Component} from 'react';\r\nimport Header from './Header.js';\r\nimport Search from './Search';\r\nimport Card from './Card';\r\nimport robots from './robots';\r\nimport Scroll from './Scroll';\r\nimport Footer from './Footer'\r\nimport 'tachyons';\r\n class App extends Component{\r\n  constructor (){\r\n    super()\r\n    this.state = {\r\n      searchfield: '',\r\n      robots: robots\r\n    }\r\n  }\r\n  onSearchChange = (event) =>{\r\n    this.setState({searchfield: event.target.value})\r\n  }\r\n  componentDidMount(){\r\n    fetch('http://localhost:3000/users')\r\n      .then(response=> response.json())\r\n      .then(users => {this.setState({ robots: users})});\r\n  }\r\n  render(){\r\n  const filteredRobots = this.state.robots.filter(robots => { return (robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase()))})\r\n  return (\r\n      <div className=\"tc\">\r\n        <Header/>\r\n        <Search searchChange={this.onSearchChange}/>\r\n        <Scroll>\r\n          <Card robots={filteredRobots}/>\r\n        </Scroll>\r\n        <Footer/>\r\n      </div>\r\n  );}\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'tachyons';\nimport './index.css';\nimport App from './App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}